module top_module (
    input clk,
    input reset,      // Synchronous reset
    input data,
    output shift_ena,
    output counting,
    input done_counting,
    output done,
    input ack );
    
    reg [3:0] state,next_state;
    localparam [3:0] s0=0,s1=1,s2=2,s3=3,s4=4,b0=5,b1=6,b2=7,b3=8,b4=9,count=10,dones=11;
    
       
     always @(posedge clk) 
         begin
            if (reset)
                state <= s0;  // Reset the FSM to S0
            else
                state <= next_state;  // Update to the next state
        end
    
    always@(*)
        	begin
            	case(state)
                    s0: next_state <= (data == 1)? s1:s0;
                    s1: next_state <= (data == 1)? s2:s0;
                    s2: next_state <= (data == 0)? s3:s2;
                    s3: next_state <= (data == 1)? s4:s0;
                    s4: next_state <= b0;
                	b0: next_state <= b1;
                	b1: next_state <= b2;
                	b2: next_state <= count;
                    count: next_state <= (done_counting)? dones:count;
                    dones: next_state <= (ack ==1)? s0:dones;
                  endcase
                end
                
    
    assign shift_ena = ((state==b1) | (state==b2) | (state==b0) | (state==s4)) ;
    assign done = (state == dones);
    assign counting = (state == count);
                
endmodule
