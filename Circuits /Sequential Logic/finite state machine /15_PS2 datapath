module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output [23:0] out_bytes,
    output done); //

    reg [2:0] state = 2'b00;
    reg [23:0] temp ;
    localparam s0= 2'b00 ,s1= 2'b01, s2= 2'b10 ,DONE = 2'b11;
    // State transition logic (combinational)
    always@(posedge clk)
        begin
            if(reset)
                begin
                	state <= s0;
                    temp <= 'b0;
                end
            else
                begin
                    case(state)
                        s0: 
                            begin
                                state <= (in[3])? s1:s0;
                                temp <= {temp [15:0],in};
                            end
                        s1: 
                            begin
                                state <= s2;
                                temp <= {temp [15:0],in};
                            end
                        s2: 
                            begin
                                state <= DONE;
                                temp <= {temp [15:0],in};
                            end
                        DONE: 
                            begin
                            	state <= (in[3])?s1:s0;
                                temp <= {temp [15:0],in};
                            end
                    endcase
                end
        end
    assign done = (state == DONE);
    assign out_bytes = (done)? temp:24'b0;
endmodule
